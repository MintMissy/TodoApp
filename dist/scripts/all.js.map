{"version":3,"sources":["CardInfoIcons.js","LabelList.js","OpenedCard.js","Task.js","TaskList.js","TodoCard.js","TodoList.js","Todos.js","main.js"],"names":["CardInfoIcons","static","LabelsList","constructor","labels","this","addLabel","label","append","removeLabel","labelIndex","splice","OpenedCard","document","querySelector","getElementById","children","navMenusEls","parentTodoInTodos","undefined","cardInTodo","card","currentCardElement","localizeCardInApp","setCardDataObjects","loadCardData","currentCardObject","data","openedCardContainer","style","display","currentNavMenuIndex","openNavMenu","unloadCardData","currentNavMenu","Todos","todosList","currentCardLocations","todoCards","changedCardData","JSON","parse","stringify","indexOf","parentTodo","closeCard","reloadCard","removeCard","cardData","loadCardTitle","title","loadCardDescription","description","loadCardIcon","iconName","titleInput","value","descriptionInput","icon","cardIconInput","innerText","iconsDropdown","addEventListener","newIconName","menuIndex","navMenusButtons","querySelectorAll","i","length","availableIcons","setNewCardIcon","toggleIconDropdown","Task","completed","deadline","setComplete","setIncomplete","assignDeadline","newDeadlineDate","TaskList","tasks","getCompletedTasksRatio","reduce","accumulator","current","addTask","task","removeTask","taskIndex","TodoCard","element","cardTitleElement","cardIconElement","infoIconsElement","scheduledDate","members","taskList","focus","onTitleInputFocusout","event","preventDefault","keyCode","blur","cardIndexInTodo","remove","openCard","reloadCardIcon","reloadCardInfoIcons","innerHTML","insertAdjacentHTML","changeCardIcon","addCardMember","removeCardMember","TodoList","addCardButton","addEmptyCard","todoCardTemplate","elementsWithCardClass","push","cardIndex","saveCardChanges","elementBeforeInsert","todoListTemplate","elementsWithTodoClass","registerListeners","registerIconsOnClicks","registerNavMenuOnClicks","darkenBackground","closeOpenedCardButton","saveCardChangesButton","saveChanges","cancelCardEditingButton","removeCardButton","removeCurrentCard","openedCardIcon","addTodoButton","addEmptyTodoList"],"mappings":"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","file":"all.js","sourcesContent":["class CardInfoIcons {\r\n  static description = `<span class=\"c-card-info-icons__icon material-icons\">subject</span>`;\r\n  static todo = `<span class=\"c-card-info-icons__icon material-icons\">done</span>`;\r\n  static schedule = `<span class=\"c-card-info-icons__icon material-icons\">schedule</span>`;\r\n}\r\n","class LabelsList {\r\n  static labelTemplate = \"\";\r\n\r\n  constructor(labels = []) {\r\n    this.labels = labels;\r\n  }\r\n\r\n  addLabel = (label) => this.labels.append(label);\r\n\r\n  removeLabel = (labelIndex) => this.labels.splice(labelIndex, labelIndex);\r\n}\r\n","class OpenedCard {\r\n  static openedCardContainer = document.querySelector(\".l-edited-card\");\r\n  static cardInput;\r\n  static titleInput = document.getElementById(\"c-edited-card__input-title\");\r\n  static descriptionInput = document.getElementById(\r\n    \"c-edited-card__input-description\"\r\n  );\r\n  static cardIconInput = document.getElementById(\"c-edited-card__input-icon\");\r\n  static iconsDropdown = document.getElementById(\"c-icons-dropdown\");\r\n  static pickableIconsContainer = document.getElementById(\"c-icons_to_pick\");\r\n  static taskList;\r\n  static tasksInputs = [];\r\n\r\n  static currentCardElement;\r\n  static currentCardObject;\r\n  static changedCardData;\r\n\r\n  static navMenusEls = document.getElementById(\"edited-card__pickable-menus\")\r\n    .children;\r\n  static currentNavMenu = OpenedCard.navMenusEls[0];\r\n  static currentNavMenuIndex = 0;\r\n\r\n  static currentCardLocations = {\r\n    parentTodoInTodos: undefined,\r\n    cardInTodo: undefined,\r\n  };\r\n\r\n  static openCard(card) {\r\n    OpenedCard.currentCardElement = card;\r\n    OpenedCard.localizeCardInApp();\r\n    OpenedCard.setCardDataObjects();\r\n    OpenedCard.loadCardData(this.currentCardObject.data);\r\n    OpenedCard.openedCardContainer.style.display = \"block\";\r\n\r\n    OpenedCard.currentNavMenuIndex = 0;\r\n    OpenedCard.openNavMenu(OpenedCard.currentNavMenuIndex);\r\n  }\r\n\r\n  static closeCard() {\r\n    OpenedCard.openedCardContainer.style.display = \"none\";\r\n    OpenedCard.unloadCardData();\r\n\r\n    OpenedCard.currentNavMenu.style.display = \"none\";\r\n    OpenedCard.currentNavMenuIndex = 0;\r\n    OpenedCard.currentNavMenu = OpenedCard.navMenusEls[0];\r\n  }\r\n\r\n  static setCardDataObjects() {\r\n    OpenedCard.currentCardObject =\r\n      Todos.todosList[\r\n        OpenedCard.currentCardLocations.parentTodoInTodos\r\n      ].todoCards[OpenedCard.currentCardLocations.cardInTodo];\r\n\r\n    this.changedCardData = JSON.parse(\r\n      JSON.stringify(this.currentCardObject.data)\r\n    );\r\n  }\r\n\r\n  static localizeCardInApp() {\r\n    OpenedCard.currentCardLocations.parentTodoInTodos = Todos.todosList.indexOf(\r\n      OpenedCard.currentCardElement.parentTodo\r\n    );\r\n    OpenedCard.currentCardLocations.cardInTodo = Todos.todosList[\r\n      this.currentCardLocations.parentTodoInTodos\r\n    ].todoCards.indexOf(OpenedCard.currentCardElement);\r\n  }\r\n\r\n  static saveChanges() {\r\n    OpenedCard.closeCard();\r\n\r\n    // Save card data\r\n    OpenedCard.currentCardObject.data = JSON.parse(\r\n      JSON.stringify(OpenedCard.changedCardData)\r\n    );\r\n    OpenedCard.currentCardObject.reloadCard();\r\n  }\r\n\r\n  static removeCurrentCard() {\r\n    // Remove card from todo list\r\n    Todos.todosList[\r\n      OpenedCard.currentCardLocations.parentTodoInTodos\r\n    ].removeCard(OpenedCard.currentCardLocations.cardInTodo);\r\n\r\n    OpenedCard.closeCard();\r\n  }\r\n\r\n  static loadCardData(cardData) {\r\n    OpenedCard.loadCardTitle(cardData.title);\r\n    OpenedCard.loadCardDescription(cardData.description);\r\n    OpenedCard.loadCardIcon(cardData.iconName);\r\n  }\r\n\r\n  static unloadCardData() {\r\n    OpenedCard.titleInput.value = \"\";\r\n    OpenedCard.descriptionInput.value = \"\";\r\n  }\r\n\r\n  static loadCardIcon(icon) {\r\n    if (icon === \"\") {\r\n      OpenedCard.cardIconInput.innerText = \"add\";\r\n    } else {\r\n      OpenedCard.cardIconInput.innerText = icon;\r\n    }\r\n  }\r\n\r\n  static loadCardTitle(title) {\r\n    OpenedCard.titleInput.value = title;\r\n  }\r\n\r\n  static loadCardLabels() {}\r\n\r\n  static loadCardMembers() {}\r\n\r\n  static loadCardDescription(description) {\r\n    OpenedCard.descriptionInput.value = description;\r\n  }\r\n\r\n  static loadCardTaskList() {}\r\n\r\n  static toggleIconDropdown() {\r\n    if (OpenedCard.iconsDropdown.style.display == \"block\") {\r\n      OpenedCard.iconsDropdown.style.display = \"none\";\r\n    } else {\r\n      OpenedCard.iconsDropdown.style.display = \"block\";\r\n    }\r\n  }\r\n\r\n  static registerListeners() {\r\n    OpenedCard.titleInput.addEventListener(\"keyup\", () => {\r\n      OpenedCard.changedCardData.title = OpenedCard.titleInput.value;\r\n    });\r\n\r\n    OpenedCard.descriptionInput.addEventListener(\"keyup\", () => {\r\n      OpenedCard.changedCardData.description =\r\n        OpenedCard.descriptionInput.value;\r\n    });\r\n  }\r\n\r\n  static setNewCardIcon(newIconName) {\r\n    OpenedCard.cardIconInput.innerText = newIconName;\r\n    OpenedCard.changedCardData.iconName = newIconName;\r\n\r\n    if (newIconName === \"\") {\r\n      OpenedCard.cardIconInput.innerText = \"add\";\r\n    }\r\n  }\r\n\r\n  static openNavMenu(menuIndex) {\r\n    OpenedCard.navMenusEls[OpenedCard.currentNavMenuIndex].style.display =\r\n      \"none\";\r\n    OpenedCard.currentNavMenu = OpenedCard.navMenusEls[menuIndex];\r\n    OpenedCard.currentNavMenu.style.display = \"block\";\r\n    this.currentNavMenuIndex = menuIndex;\r\n  }\r\n\r\n  static registerNavMenuOnClicks() {\r\n    const navMenusButtons = document.querySelectorAll(\r\n      \".c-edited-card__navbar__item\"\r\n    );\r\n    for (let i = 0; i < navMenusButtons.length; i++) {\r\n      let navMenuBtn = navMenusButtons[i];\r\n      navMenuBtn.addEventListener(\"click\", () => {\r\n        OpenedCard.openNavMenu(i);\r\n      });\r\n    }\r\n  }\r\n\r\n  static registerIconsOnClicks() {\r\n    const availableIcons = document.getElementById(\"c-icons-to-pick\");\r\n\r\n    for (const icon of availableIcons.children) {\r\n      // Register remove icon listener\r\n      if (icon.innerText === \"close\") {\r\n        availableIcons.children[0].addEventListener(\"click\", () => {\r\n          OpenedCard.setNewCardIcon(\"\");\r\n          OpenedCard.toggleIconDropdown();\r\n        });\r\n        continue;\r\n      }\r\n\r\n      // Register icons on click beside first\r\n      icon.addEventListener(\"click\", () => {\r\n        OpenedCard.setNewCardIcon(icon.innerText);\r\n        OpenedCard.toggleIconDropdown();\r\n      });\r\n    }\r\n  }\r\n}\r\n","class Task {\r\n  constructor(description, completed = false, deadline = null) {\r\n    this.completed = completed;\r\n    this.description = description;\r\n    this.deadline = deadline;\r\n  }\r\n\r\n  setComplete = () => (this.completed = true);\r\n\r\n  setIncomplete = () => (this.completed = false);\r\n\r\n  assignDeadline = (newDeadlineDate) => (this.deadline = newDeadlineDate);\r\n}\r\n","class TaskList {\r\n  constructor(tasks = []) {\r\n    this.tasks = tasks;\r\n  }\r\n\r\n  getCompletedTasksRatio() {\r\n    let completedTasks = this.tasks.reduce((accumulator, current) => {\r\n      return accumulator + current ? 1 : 0;\r\n    });\r\n\r\n    return `${completedTasks}/${this.tasks.length}`;\r\n  }\r\n\r\n  addTask(task) {\r\n    this.tasks.append(task);\r\n  }\r\n\r\n  removeTask(taskIndex) {\r\n    this.tasks.splice(taskIndex, taskIndex);\r\n  }\r\n}\r\n","class TodoCard {\r\n  static todoCardTemplate = `\r\n    <div class=\"c-todo-card todo-card-box\">\r\n      <div class=\"c-todo-card__labels\"></div>\r\n      <div class=\"c-todo-card__content\">\r\n        <span class=\"material-icons c-card-content__icon\"></span>\r\n        <h1 class=\"c-card-content__title\">\r\n          <input type=\"text\" class=\"c-card-content__title-input\">\r\n        </h1>\r\n      </div>\r\n      <div class=\"c-todo-card__footer\">\r\n        <div class=\"c-card-info-icons\"></div>\r\n        <div class=\"c-card-members\"></div>\r\n      </div>\r\n    </div>`;\r\n\r\n  constructor(element, parentTodo) {\r\n    this.parentTodo = parentTodo;\r\n    this.element = element;\r\n    this.titleInput = element.querySelector(\".c-card-content__title-input\");\r\n    this.cardTitleElement = this.element.querySelector(\r\n      \".c-card-content__title\"\r\n    );\r\n    this.cardIconElement = this.element.querySelector(\".c-card-content__icon\");\r\n    this.infoIconsElement = this.element.querySelector(\".c-card-info-icons\");\r\n\r\n    this.data = {\r\n      iconName: \"\",\r\n      title: \"\",\r\n      labels: [],\r\n      scheduledDate: \"\",\r\n      members: [],\r\n      description: \"\",\r\n      taskList: new TaskList(),\r\n    };\r\n\r\n    this.titleInput.focus();\r\n\r\n    this.titleInput.addEventListener(\"focusout\", () => {\r\n      this.onTitleInputFocusout();\r\n    });\r\n\r\n    // If user press enter or esc focus out element\r\n    this.titleInput.addEventListener(\"keyup\", (event) => {\r\n      event.preventDefault();\r\n\r\n      if (event.keyCode === 13 || event.keyCode === 27) {\r\n        this.titleInput.blur();\r\n      }\r\n    });\r\n  }\r\n\r\n  onTitleInputFocusout() {\r\n    // If input is empty remove card\r\n    if (this.titleInput.value === \"\" || this.titleInput.value == undefined) {\r\n      let cardIndexInTodo = this.parentTodo.todoCards.indexOf(this);\r\n      this.parentTodo.removeCard(cardIndexInTodo);\r\n    }\r\n\r\n    // Save title in data and set card title\r\n    this.data.title = this.titleInput.value;\r\n    this.cardTitleElement.innerText = this.titleInput.value;\r\n\r\n    // Remove title input element\r\n    this.titleInput.remove();\r\n\r\n    this.element.addEventListener(\"click\", () => {\r\n      OpenedCard.openCard(this);\r\n    });\r\n  }\r\n\r\n  reloadCard() {\r\n    this.cardTitleElement.innerText = this.data.title;\r\n    this.reloadCardIcon();\r\n    this.reloadCardInfoIcons();\r\n  }\r\n\r\n  reloadCardIcon() {\r\n    this.cardIconElement.innerText = this.data.iconName;\r\n  }\r\n\r\n  reloadCardInfoIcons() {\r\n    this.infoIconsElement.innerHTML = \"\";\r\n\r\n    if (this.data.description != \"\") {\r\n      this.infoIconsElement.insertAdjacentHTML(\r\n        \"afterbegin\",\r\n        CardInfoIcons.description\r\n      );\r\n    }\r\n  }\r\n\r\n  changeCardIcon() {}\r\n\r\n  addCardMember() {}\r\n\r\n  removeCardMember() {}\r\n}\r\n","class TodoList {\r\n  static todoListTemplate = `\r\n    <div class=\"todo-list\">\r\n      <input class=\"todo-list__title\"placeholder=\"Todo Title\"></input>\r\n      <div class=\"add-card button button--big\">\r\n        <span class=\"inline-icon  material-icons\">add</span>\r\n        Add Card\r\n      </div>\r\n    </div>`;\r\n\r\n  constructor(element) {\r\n    this.element = element;\r\n    this.todoCards = [];\r\n    this.title = \"\";\r\n    this.titleInput = element.querySelector(\".todo-list__title\");\r\n    this.addCardButton = element.querySelector(\".add-card\");\r\n\r\n    this.titleInput.focus();\r\n\r\n    this.addCardButton.addEventListener(\"click\", () => {\r\n      this.addEmptyCard();\r\n    });\r\n  }\r\n\r\n  addEmptyCard() {\r\n    this.addCardButton.insertAdjacentHTML(\r\n      \"beforebegin\",\r\n      TodoCard.todoCardTemplate\r\n    );\r\n\r\n    // Create TodoList instance and add it to todosList\r\n    let elementsWithCardClass = this.element.querySelectorAll(\".c-todo-card\");\r\n    this.todoCards.push(\r\n      new TodoCard(\r\n        elementsWithCardClass[elementsWithCardClass.length - 1],\r\n        this\r\n      )\r\n    );\r\n  }\r\n\r\n  removeCard(cardIndex) {\r\n    this.todoCards[cardIndex].element.remove();\r\n    this.todoCards.splice(cardIndex, 1);\r\n  }\r\n\r\n  saveCardChanges() {}\r\n}\r\n","class Todos {\r\n  static todosContainer = document.querySelector(\".todos-container\");\r\n  static todosList = [];\r\n\r\n  static addEmptyTodoList(elementBeforeInsert) {\r\n    // Add element to page\r\n    elementBeforeInsert.insertAdjacentHTML(\r\n      \"beforebegin\",\r\n      TodoList.todoListTemplate\r\n    );\r\n\r\n    // Create TodoList instance and add it to todosList\r\n    let elementsWithTodoClass = document.querySelectorAll(\".todo-list\");\r\n    this.todosList.push(\r\n      new TodoList(elementsWithTodoClass[elementsWithTodoClass.length - 2])\r\n    );\r\n  }\r\n}\r\n","OpenedCard.registerListeners();\r\nOpenedCard.registerIconsOnClicks();\r\nOpenedCard.registerNavMenuOnClicks();\r\n\r\nconst darkenBackground = document.querySelector(\".darken-background\");\r\ndarkenBackground.addEventListener(\"click\", OpenedCard.closeCard);\r\n\r\nconst closeOpenedCardButton = document.getElementById(\r\n  \"c-edited-card__close-card\"\r\n);\r\ncloseOpenedCardButton.addEventListener(\"click\", OpenedCard.closeCard);\r\n\r\nconst saveCardChangesButton = document.getElementById(\"save-card-changes\");\r\nsaveCardChangesButton.addEventListener(\"click\", OpenedCard.saveChanges);\r\n\r\nconst cancelCardEditingButton = document.getElementById(\"cancel-card-editing\");\r\ncancelCardEditingButton.addEventListener(\"click\", OpenedCard.closeCard);\r\n\r\nconst removeCardButton = document.getElementById(\"c-edited-card__remove-card\");\r\nremoveCardButton.addEventListener(\"click\", OpenedCard.removeCurrentCard);\r\n\r\nconst openedCardIcon = document.getElementById(\"c-edited-card__input-icon\");\r\nopenedCardIcon.addEventListener(\"click\", OpenedCard.toggleIconDropdown);\r\n\r\n// Create new todo list after clicking in add-todo button\r\nconst addTodoButton = document.getElementById(\"add-todo\");\r\n\r\naddTodoButton.addEventListener(\"click\", () => {\r\n  Todos.addEmptyTodoList(addTodoButton);\r\n});\r\n"]}